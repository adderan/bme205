#!/usr/bin/env python2.7

#Alden Deran (adderan)

from __future__ import print_function
import sys, argparse, itertools, collections

degenerate_bases = {
	'A': ['A'],
	'G': ['G'],
	'C': ['C'],
	'T': ['T'],
	'U': ['T'],
	'R': ['G', 'A'],
	'Y': ['T', 'C'],
	'K': ['G', 'T'],
	'M': ['A', 'C'],
	'S': ['G', 'C'],
	'W': ['A', 'T'],
	'B': ['G', 'T', 'C'],
	'D': ['G', 'A', 'T'],
	'H': ['A', 'C', 'T'],
	'V': ['G', 'C', 'A'],
	'N': ['G', 'C', 'A', 'T']
}
def parse_codon_table(infile):
	codon_acid = {}
	for line in infile:
		info = line.split()
		acid = info[0]
		codons = info[3:]
		for codon in codons:
			codon = codon[0:3] #remove comma if present
			codon_acid[codon] = acid
	return codon_acid

def parse_arguments():
	parser = argparse.ArgumentParser(description = "Creates a table of amino acids encoded by a degenerate codon")
	parser.add_argument("--codon_table", type = argparse.FileType('r'), help = "Map from amino acids to codons.")
	args = parser.parse_args()
	return args
def generate_all_codons(degenerate_bases):
	for codon in itertools.product(degenerate_bases.keys(), repeat = 3):
		yield ''.join(codon)
	
def make_codon_expand_table(degenerate_bases):
	codon_expand_table = {}
	for codon in generate_all_codons(degenerate_bases):
		degenerate_options = [degenerate_bases[base] for base in codon]
		codon_expand_table[codon] = []
		for expand_codon in itertools.product(*degenerate_options):
			expand_codon = ''.join(expand_codon)
			codon_expand_table[codon].append(expand_codon)
	return codon_expand_table
		
def make_degenerate_codon_to_acid_multiset(codon_table, codon_expand_table):
	degenerate_codon_to_acid = {}
	for degenerate_codon in codon_expand_table.keys():
		degenerate_codon_to_acid[degenerate_codon] = collections.Counter()
		for expand_codon in codon_expand_table[degenerate_codon]:
			acid = codon_table[expand_codon]
			degenerate_codon_to_acid[degenerate_codon][acid] += 1
	return degenerate_codon_to_acid
def make_acid_list_to_degenerate_codons(degenerate_codon_to_acid):
	acid_list_to_degenerate_codons = {}
	for degenerate_codon, multiset in degenerate_codon_to_acid.items():
		keystring = ''.join(sorted(multiset.keys()))
		if keystring not in acid_list_to_degenerate_codons:
			acid_list_to_degenerate_codons[keystring] = []
		acid_list_to_degenerate_codons[keystring].append(degenerate_codon)
	return acid_list_to_degenerate_codons
	
def main():
	args = parse_arguments()
	codon_acid_table = parse_codon_table(args.codon_table)
	#print(codon_acid_table)
	codon_expand_table = make_codon_expand_table(degenerate_bases)
	degenerate_codon_to_acid = make_degenerate_codon_to_acid_multiset(codon_acid_table, codon_expand_table)
	acid_list_to_degenerate_codons = make_acid_list_to_degenerate_codons(degenerate_codon_to_acid)
	print(acid_list_to_degenerate_codons)


if __name__ == "__main__":
	sys.exit(main())
