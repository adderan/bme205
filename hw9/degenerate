#!/usr/bin/env python2.7

#Alden Deran (adderan)

from __future__ import print_function
import sys, argparse, degenerate_codons, string

def parse_codon_table(infile):
	codon_acid = {}
	for line in infile:
		info = line.split()
		acid = info[0]
		codons = info[3:]
		for codon in codons:
			codon = codon[0:3] #remove comma if present
			codon_acid[codon] = acid
	return codon_acid

def parse_arguments():
	parser = argparse.ArgumentParser(description = "Creates a table of amino acids encoded by a degenerate codon")
	parser.add_argument("--codon_table", type = argparse.FileType('r'), help = "Map from amino acids to codons.")
	parser.add_argument("--codon_frequency", type = argparse.FileType('r'), help = "Codon frequency table.")
	parser.add_argument("--output_format", type = str, default = "minimal", help = "Output format.")
	args = parser.parse_args()
	return args


def parse_codon_frequency(infile):
	"""Accepts a file containing an RNA codon count table with four codons
	and their counts on each line. The format for each line should look like:

	AAA 23.5( 3400) AAC 45.6( 34323) ....

	Returns a dictionary such that codon_counts[codon] is the number of counts
	given for that codon in the input file. Counts for stop codons are always set 
	to zero."""

	codon_bias = {}

	#converts RNA to DNA
	rna_table = string.maketrans("ACUG", "ACTG")

	for line in infile:
		codon_info = line.split()
		if len(codon_info) != 12: continue
		for i in range(4):
			codon = codon_info[3*i].translate(rna_table)
			count = codon_info[3*i + 2]
			count = int(count[0:len(count)-1]) #remove the parenthesis at the end
			codon_bias[codon] = count

	return codon_bias

def main():
	args = parse_arguments()
	codon_frequency = parse_codon_frequency(args.codon_frequency)
	codon_acid_table = parse_codon_table(args.codon_table)
	dc = degenerate_codons.DegenerateCodons(codon_acid_table, codon_frequency)
	if args.output_format == "minimal":
		dc.print_minimal_table()
	if args.output_format == "min-codons":
		dc.print_min_codons_table()	

if __name__ == "__main__":
	sys.exit(main())
