#!/usr/bin/env python2.7

#Alden Deran (adderan)

from __future__ import print_function
import argparse, sys, random, string, collections, bisect, operator, sequence_parser, re

complement_table = string.maketrans("ACTG", "TGAC")

#dictionary of amino acid symbols, so that
#acid_to_codon[acid] is a list of codons that 
#represent that amino acid
acid_to_codon = {
'F': ['TTT', 'TTC'],
'L': ['TTA', 'TTG', 'CTT', 'CTC', 'CTA', 'CTG'],
'I': ['ATT', 'ATC', 'ATA'],
'M': ['ATG'],
'V': ['GTT', 'GTC', 'GTA', 'GTG'],
'S': ['TCT', 'TCC', 'TCA', 'TCG'],
'P': ['CCT', 'CCC', 'CCA', 'CCG'],
'T': ['ACT', 'ACC', 'ACA', 'ACG'],
'A': ['GCT', 'GCC', 'GCA', 'GCG'],
'Y': ['TAT', 'TAC'],
'H': ['CAT', 'CAC'],
'Q': ['CAA', 'CAG'],
'N': ['AAT', 'AAC'],
'K': ['AAA', 'AAG'],
'D': ['GAT', 'GAC'],
'E': ['GAA', 'GAG'],
'C': ['TGT', 'TGC'],
'W': ['TGG'],
'R': ['CGT', 'CGC', 'CGA', 'CGG'],
'S': ['AGT', 'AGC'],
'R': ['AGA', 'AGG'],
'G': ['GGT', 'GGC', 'GGA', 'GGG'],
}

#regular expression that matches start codons
atg = re.compile(r"ATG")

def parse_arguments():
	"""Parse a codon frequency table, a number of sequences to generate, and
	an optional protein."""

	parser = argparse.ArgumentParser(description = "Generates long ORFs (sequences of"
		"codons beginning with ATG and containing no stop codons, and outputs a histogram"
		"of the lengths of the longest ORF on the opposite strand of the one generated. If a protein"
		"is provided, the sequences generated are required to code for that protein.")
	parser.add_argument("--protein", type = argparse.FileType('r'),  help = "An optional file containing a protein sequence in FASTA format.")
	parser.add_argument("--codon", type = argparse.FileType('r'), help = "Codon bias table.")
	parser.add_argument("--num_sequences", type = int, default = 10000, help = "Number of sequences to generate.")

	args = parser.parse_args()
	return args

def main():
	"""Read a table of codon counts for an organism, and then generate
	random proteins and check for the longest open reading frame on their 
	reverse compelement strands. Record the number of occurrences of each
	ORF length, and calculate the p-value for each length by adding all the
	counts for lengths greater than or equal to that length. Output the results in four
	columns (length, count, probability, p-value). If a protein is provided, 
	sequences that also code for that protein are generated rather than random proteins."""
	args = parse_arguments()


	codon_table = parse_codon_table(args.codon)
	codon_list, cumulative_counts = process_codon_table(codon_table)

	#counter that will represent a histogram
	#of the reverse strand ORF lengths, so that
	#rc_orf_length[length] is the number of ORFs
	#with that length
	rc_orf_length = collections.Counter()


	input_protein = None
	if args.protein:
		input_protein = ""
		for name, description, seq in sequence_parser.read_fasta(args.protein):
			input_protein += seq
		print("Using a length ", len(input_protein), " protein", file = sys.stderr)


	for i in xrange(args.num_sequences):

		#Generate a protein sequence using the provided codon frequencies. If an 
		#input protein was provided, the generated sequence is required to code
		#for that protein.
		if input_protein:	
			protein = generate_equivalent_protein(input_protein, codon_table)
		else:
			protein = generate_protein(560, codon_list, cumulative_counts)


		longest_rc_orf = length_of_longest_reverse_strand_orf(protein)
		rc_orf_length[longest_rc_orf] += 1

	#get a list of the lengths and a list of their corresponding counts
	lengths, counts = zip(*rc_orf_length.items())
	max_length = max(lengths)
	

	for length in range(max_length):
		count = rc_orf_length[length]

		#Add up the counts for lengths greater than or equal to length.
		tail_area = sum([rc_orf_length[l] for l in range(length, max_length)])

		length_probability = float(count)/args.num_sequences
		p_value = float(tail_area)/args.num_sequences
		if(count != 0):
			print(length, "\t", count, "\t", length_probability, "\t", p_value, sep = '')

def generate_equivalent_protein(protein, codon_bias):
	"""Generates a sequence that codes for the given protein
	by randomly selecting codons that represent each amino acid, 
	weighted by their frequency of occurrence in the codon_bias
	dict."""
	#print(protein)
	equiv_protein = "ATG"
	for acid in protein[1:]:
		possible_codons = acid_to_codon[acid]

		#list containing a running total of the counts, 
		#so that cumlative_totals[i] is the sum of the counts
		#for the i-th codon and all the others preceding it
		#in the list of possible codons.
		cumulative_totals = []

		total = 0 #contains the cumulative count
		for pc in possible_codons:
			total += codon_bias[pc]
			cumulative_totals.append(total)

		#generate a random integer. This integer
		#will fall into one of the ranges corresponding 
		#to one of the possible codons. 
		score = random.randint(0, total-1)

		#The codon corresponding to the range that the integer
		#was contained in
		index = bisect.bisect(cumulative_totals, score)

		alt_codon = possible_codons[index]
		equiv_protein += alt_codon
	return equiv_protein


def parse_codon_table(infile):
	"""Accepts a file containing an RNA codon count table with four codons
	and their counts on each line. The format for each line should look like:

	AAA 23.5( 3400) AAC 45.6( 34323) ....

	Returns a dictionary such that codon_counts[codon] is the number of counts
	given for that codon in the input file. Counts for stop codons are always set 
	to zero."""

	codon_bias = {}

	#converts RNA to DNA
	rna_table = string.maketrans("ACUG", "ACTG")

	for line in infile:
		codon_info = line.split()
		if len(codon_info) != 12: continue
		for i in xrange(4):
			codon = codon_info[3*i].translate(rna_table)
			count = codon_info[3*i + 2]
			count = int(count[0:len(count)-1]) #remove the parenthesis at the end
			codon_bias[codon] = count

	#don't want to generate any stop codons.
	codon_bias["TAG"] = 0
	codon_bias["TAA"] = 0
	codon_bias["TGA"] = 0
	return codon_bias
		

def process_codon_table(codon_bias):
	"""Accepts a dictionary of codon counts, and
	adds the counts for each codon, storing the result after
	adding each codon in a list. Returns the cumulative count 
	list and the codon list. The two lists are the 
	same length and the cumulative count at index i corresponds
	to the codon at index i in the codon list."""

	codon_list = []
	cumulative_counts = []
	cumulative_count = 0
	for codon, count in codon_bias.items():
		cumulative_count += count
		codon_list.append(codon)
		cumulative_counts.append(cumulative_count)
	return (codon_list, cumulative_counts)

def length_of_longest_reverse_strand_orf(protein):
	"""Takes the reverse complement of a protein and then scans it
	to find the longest open reading frame (defined as a series of
	codons starting with ATG and not containing a stop codon) at any
	position. Returns the length of the longest ORF."""

	protein_rc = protein[::-1].translate(complement_table)
	#print(protein_rc)
	longest_orf = 0
	codon = ""

	#indices of all start codons (ATG) in the reverse strand protein
	match_indices = [m.start() for m in re.finditer(atg, protein_rc)]

	for match in match_indices:
	
		index = match + 3 #start reading the codon after ATG
		while index < len(protein_rc) - 3:
			codon = protein_rc[index:index + 3]
			if codon == "TAG" or codon == "TAA" or codon == "TGA": break
			index += 3
		if index - match > longest_orf:
			longest_orf = index - match
	return longest_orf/3 #divide by 3 to convert nucleotide length to number of codons

	

def generate_protein(length, codon_list, cumulative_counts):
	"""Generates a random protein by sampling codons, weighted by
	their counts. The input codon_list contains each codon, and the
	cumulative_counts list contains a running total of counts up to and
	including the counts for the corresponding codon in codon_list."""
	protein = []
	protein += ["A","T","G"]
	count_total = max(cumulative_counts)
	for i in xrange(length-1):
		score = random.randint(0, count_total - 1)
		index = bisect.bisect(cumulative_counts, score)
		codon = codon_list[index]
		protein += codon
	return ''.join(protein)

if __name__ == "__main__":
	sys.exit(main())

