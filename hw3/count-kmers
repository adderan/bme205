#!/usr/bin/env python2.7
#Alden Deran (adderan)

from __future__ import print_function

import sys, sequence_parser, argparse, string, markov


"""Reads a FASTA file and outputs the number of occurrences of each kmer.

Output is in the format [k-mer] (tab) [count] and goes to standard output. A k-mer is defined
as a length-k sequence of characters.
"""

def parse_arguments():
	parser = argparse.ArgumentParser()
	parser.add_argument("--order", type = int, default = 0, help = "Length of the kmers to count. Defaults to 1.")
	parser.add_argument("--alphabet", type = set, default = set(string.letters), help = "The set of characters to count in kmers. All other characters will be ignored. Defaults to the set of uppercase and lowercase letters")
	args = parser.parse_args()
	return args

def main():
	args = parse_arguments()

	#count the number of k-mers with k = order + 1, since a zeroth oder markov model uses 1-mers.
	counts = markov.get_counts(sys.stdin, sequence_parser.read_fasta, args.order + 1, args.alphabet)
	
	for kmer, count in counts.most_common():
		print("{0} {1}".format(kmer, count), file = sys.stdout)

if __name__ == "__main__":
	sys.exit(main())

